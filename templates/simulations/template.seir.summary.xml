<!-- 
    SEIR model with density-dependence and sampling through time (no rho-sampling)

    Model parameters:

        Fixed populations size = {$popSize}

        Canonincal parameterization:
            Effective birth rate (lambda)  = {$infectionRate:.8g}
            Death rate (mu)                = {$recoveryRate:.8g}
            Sampling rate (psi)            = {$samplingRate:.8g}
        
        reproductiveNumber parameterization:
            Initial reproductiveNumber       = {$reproductiveNumber:.8g}
            Become uninfectious rate (delta) = {$becomeUninfectiousRate:.8g}
            Sampling proportion              = {$samplingProportion:.8g}

        All times in years

    Simulate {$nTraj} trajectories.
    Stop simulation at time {$stopTime} 
    Sample at {$nSamples} data points between 0 and {$stopTime}
-->

<beast version='2.0' namespace='master
                               :master.model
                               :master.outputs
                               :master.steppers'>
  <run spec='EnsembleSummary'
       nTraj="{$nTraj}"
       nSamples="{$nSamples}"
       simulationTime="{$stopTime}"
       verbosity="1">

    <stepper spec='TauLeapingStepper' stepSize="0.01"/>
    <!--<stepper spec='GillespieStepper' />-->

    <model spec='Model' id='model'>
      <population spec='Population' id='S' populationName='S'/>
      <population spec='Population' id='E' populationName='E'/>
      <population spec='Population' id='I' populationName='I'/>
      <population spec='Population' id='R' populationName='R'/>
      <population spec='Population' id='Y' populationName='Y'/>
      
      <reaction spec='Reaction' reactionName="Infection" rate="{$infectionRate:.8g}">
          S:2 + I:1 -> I:1 + E:1
      </reaction>
      <reaction spec='Reaction' reactionName="Incubation" rate="{$incubationRate:.8g}">
          E:1 -> I:1
      </reaction>
      <reaction spec='Reaction' reactionName="Recovery" rate="{$recoveryRate:.8g}">
          I:1 -> R:1
      </reaction>
      <reaction spec='Reaction' reactionName="Sampling" rate="{$samplingRate:.8g}">
          I:1 -> Y:1
      </reaction>
    </model>
    
    <initialState spec='InitState'>
      	<populationSize spec='PopulationSize' population='@S' size='{$popSize}'/>
        <populationSize spec='PopulationSize' population='@E' size='1'/>
    </initialState>

	<moment spec='Moment' momentName='S'>
	    <factor idref='S'/>
	</moment>

	<moment spec='Moment' momentName='E'>
	    <factor idref='E'/>
	</moment>

	<moment spec='Moment' momentName='I'>
	    <factor idref='I'/>
	</moment>

	<moment spec='Moment' momentName='R'>
	    <factor idref='R'/>
	</moment>

	<moment spec='Moment' momentName='Y'>
	    <factor idref='Y'/>
	</moment>

	<momentGroup spec='MomentGroup' momentGroupName='EI' sum="true">        
        <moment spec='Moment'>
            <factor idref='E'/>
        </moment>
        <moment spec='Moment'>
            <factor idref='I'/>
        </moment>
    </momentGroup>

    <momentGroup spec='MomentGroup' momentGroupName='N' sum="true">
        <moment spec='Moment'>
            <factor idref='S'/>
        </moment>
        <moment spec='Moment'>
            <factor idref='E'/>
        </moment>
        <moment spec='Moment'>
            <factor idref='I'/>
        </moment>
        <moment spec='Moment'>
            <factor idref='R'/>
        </moment>
    </momentGroup>

    <output spec='JsonOutput'   fileName='{$name}.json'/>
  </run>
</beast>

